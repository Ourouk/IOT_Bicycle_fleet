[{"id":"c5efce4d.d0f16","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"4fe90c4e.177694","type":"mqtt-broker","name":"Mosquitto L2","broker":"192.199.1.253","port":"8883","tls":"cfadeb17.1c3bf8","clientid":"trusted-RPiStation1","usetls":true,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"cfadeb17.1c3bf8","type":"tls-config","name":"Rpi TLS/SSL","cert":"","key":"","ca":"","certname":"rpi_mqtt.crt","keyname":"rpi_mqtt.key.unlocked","caname":"ca.crt","servername":"","verifyservercert":false},{"id":"f7c644f1.2df738","type":"serial-port","serialport":"/dev/ttyUSB0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"470576f2.cc86b8","type":"mqtt-broker","name":"","broker":"127.0.0.1","port":"1883","clientid":"RpiStation01","usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"b40e6115.a50b","type":"grovepi-button","z":"c5efce4d.d0f16","name":"Refresh Button","mode":"timer","interval":1,"unit":"s","pin":"2","sensorname":"","sensorid":"grovepi.button.1","x":300,"y":220,"wires":[["97027093.b154d8"]]},{"id":"56eee1b2.77267","type":"grovepi-rotary","z":"c5efce4d.d0f16","name":"Menu Selector","mode":"timer","interval":1,"unit":"s","pin":"0","sensorname":"Rotary Angle Sensor","sensorid":"grovepi.rotary.1","x":290,"y":300,"wires":[["b808f755.4eb478"]]},{"id":"49447143.b68a4","type":"camerapi-takephoto","z":"c5efce4d.d0f16","filemode":"0","filename":"","filedefpath":"1","filepath":"","fileformat":"jpeg","resolution":"10","rotation":"0","fliph":"0","flipv":"0","brightness":"50","contrast":"0","sharpness":"0","quality":"80","imageeffect":"none","exposuremode":"auto","iso":"0","agcwait":"1.0","led":"0","awb":"auto","name":"Saved on ~/auth_pic","x":1020,"y":920,"wires":[[]]},{"id":"96c70010.e7318","type":"grovepi-rgblcd","z":"c5efce4d.d0f16","name":"LCD Menu","divided":false,"text":"payload","textSource":"msg","row1":"payload","row1Source":"msg","row2":"payload","row2Source":"msg","color":"green","colorSource":"str","x":1550,"y":220,"wires":[[]]},{"id":"f1540ab0.f401a8","type":"mqtt out","z":"c5efce4d.d0f16","name":"Send GPS Data To Martin (L2 Server)","topic":"hepl/location","qos":"0","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"4fe90c4e.177694","x":1410,"y":700,"wires":[]},{"id":"dae8c1ae.e04df","type":"function","z":"c5efce4d.d0f16","name":"Parse2Json","func":"// Drop helper: return null to reject the message\nfunction reject(reason) {\n    node.warn(`Rejected message: ${reason}`);\n    return null;\n}\n\nif (!msg || !msg.payload || typeof msg.payload.decrypted !== 'string') {\n    return reject('No decrypted string found');\n}\n\nconst parts = String(msg.payload.decrypted).split(',').map(s => s.trim());\nif (parts.length === 0) {\n    return reject('Empty parts');\n}\n\nlet output = null;\n\nswitch (parts[0]) {\n    case 'loc': {\n        // Expect: loc, id, lat, lon, satellites, dd/mm/yy, HH:MM:SS\n        if (parts.length < 7) {\n            return reject(`LOC: insufficient fields (${parts.length})`);\n        }\n\n        // Reject if any critical fields are N/A or empty\n        const invalidTokens = new Set(['N/A', 'NA', '', 'null', 'undefined']);\n        const [_, idRaw, latRaw, lonRaw, satRaw, dateRaw, timeRaw] = parts;\n\n        if ([latRaw, lonRaw, satRaw, dateRaw, timeRaw].some(v => invalidTokens.has(String(v).toUpperCase()))) {\n            return reject('LOC: contains N/A/invalid fields');\n        }\n\n        const id = idRaw; // keep mapping as-is; change if you want to map \"1\" -> \"location\"\n        const lat = parseFloat(latRaw);\n        const lon = parseFloat(lonRaw);\n        const satellites = parseInt(satRaw, 10);\n\n        if (!Number.isFinite(lat) || lat < -90 || lat > 90) return reject('LOC: invalid latitude');\n        if (!Number.isFinite(lon) || lon < -180 || lon > 180) return reject('LOC: invalid longitude');\n        if (!Number.isInteger(satellites) || satellites < 0) return reject('LOC: invalid satellites');\n\n        // dateRaw expected dd/mm/yy, timeRaw HH:MM:SS (UTC)\n        const datePart = dateRaw.split('/');\n        const timePart = timeRaw.split(':');\n        if (datePart.length !== 3 || timePart.length !== 3) return reject('LOC: invalid date/time format');\n\n        const [dd, mm, yy] = datePart;\n        const [HH, MM, SS] = timePart;\n        const iso = `20${yy}-${mm.padStart(2,'0')}-${dd.padStart(2,'0')}T${HH.padStart(2,'0')}:${MM.padStart(2,'0')}:${SS.padStart(2,'0')}Z`;\n        const date = new Date(iso);\n        if (isNaN(date.getTime())) return reject('LOC: unparsable timestamp');\n\n        output = {\n            device_id: id,\n            type: 'location',\n            timestamp: date.toISOString(),\n            satellites,\n            coordinates: { lat, lon }\n        };\n        break;\n    }\n\n    case 'aut': {\n        // Expect: aut, id, user, action\n        if (parts.length < 4) {\n            return reject(`AUT: insufficient fields (${parts.length})`);\n        }\n\n        const [_, id, user, action] = parts;\n        const invalidTokens = new Set(['N/A', 'NA', '', 'null', 'undefined']);\n        if ([id, user, action].some(v => invalidTokens.has(String(v).toUpperCase()))) {\n            return reject('AUT: contains N/A/invalid fields');\n        }\n\n        output = {\n            device_id: id,\n            type: 'auth',\n            action,\n            user_id: user,\n            timestamp: new Date().toISOString()\n        };\n        break;\n    }\n\n    default:\n        return reject(`Unknown message type: ${parts[0]}`);\n}\n\nmsg.payload = output;\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":640,"wires":[["8ad3c15b.c73bd","f1540ab0.f401a8","ae19c93b.0ff848"]]},{"id":"a02342fb.cbc2c","type":"inject","z":"c5efce4d.d0f16","name":"Inject JSON loc","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device_id\":\"1\",\"type\":\"location\",\"timestamp\":\"2025-06-08T12:00:00.000Z\",\"satellites\":7,\"coordinates\":{\"lat\":48.856613,\"lon\":2.352222}}","payloadType":"json","x":260,"y":700,"wires":[["f1540ab0.f401a8"]]},{"id":"7bbb3b54.f88cb4","type":"serial in","z":"c5efce4d.d0f16","name":"LoRa Rx","serial":"f7c644f1.2df738","x":160,"y":520,"wires":[["5b8e200c.5e44b"]]},{"id":"8ad3c15b.c73bd","type":"debug","z":"c5efce4d.d0f16","name":"Debug pipeline","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1300,"y":580,"wires":[]},{"id":"5b8e200c.5e44b","type":"function","z":"c5efce4d.d0f16","name":"Parse Data + discard unwanted packets","func":"if (typeof msg.payload !== \"string\" || !msg.payload.startsWith(\"Data:\")) {\n    return null;\n}\n\n// Extract hex string part\nconst hexMatch = msg.payload.match(/HEX:\\)\\s*([0-9A-Fa-f\\s]+)/);\nif (!hexMatch) return null;\n\nlet hexString = hexMatch[1].replace(/\\s+/g, '');\n\nif (!/^[0-9A-Fa-f]+$/.test(hexString) || hexString.length % 2 !== 0) {\n    return null;\n}\n\n// Check if the length of the hexString is a multiple of 16\nif (hexString.length % 16 !== 0) {\n      msg.payload = null;\n}else\n{\n    \n    msg.payload = hexString.toLowerCase(); // or keep uppercase, forge handles both\n\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":520,"wires":[["f595396b.d794f8"]]},{"id":"53584f4a.9255f","type":"inject","z":"c5efce4d.d0f16","name":"Encrypted message example","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"2810b5e7b221347f2e14695258c6cb80721eb8fbcdc59bc90dc41126a409549e459112018535dadf9699ae7265b026b9","payloadType":"str","x":220,"y":580,"wires":[["73da539b.a7227c"]]},{"id":"73da539b.a7227c","type":"cipher","z":"c5efce4d.d0f16","name":"Decrypt","function":"Decrypt","algorithm":"AES-ECB","iv":"","key":"000102030405060708090A0B0C0D0E0F","ivSize":"16","keySize":"16","x":940,"y":580,"wires":[["8ad3c15b.c73bd","dae8c1ae.e04df"]]},{"id":"f32a67a7.10bbe8","type":"inject","z":"c5efce4d.d0f16","name":"Exemple esp32Lora message","props":[{"p":"payload.decrypted","v":"GPS,1,48.856613,2.352222,7,08/06/25,12:00:00","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":220,"y":640,"wires":[["dae8c1ae.e04df"]]},{"id":"75ee0472.790534","type":"mqtt in","z":"c5efce4d.d0f16","name":"","topic":"/hepl/auth/reply","qos":"2","datatype":"auto","broker":"4fe90c4e.177694","nl":false,"rap":true,"rh":0,"x":680,"y":860,"wires":[["6c7dbff5.6a399"]]},{"id":"b080859c.b44e78","type":"serial out","z":"c5efce4d.d0f16","name":"LoRa Tx","serial":"f7c644f1.2df738","x":1540,"y":1040,"wires":[]},{"id":"61fac93f.584d58","type":"mqtt out","z":"c5efce4d.d0f16","name":"ToRacks","topic":"station/rack","qos":"2","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"470576f2.cc86b8","x":1480,"y":880,"wires":[]},{"id":"f595396b.d794f8","type":"switch","z":"c5efce4d.d0f16","name":"Filter Out","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":760,"y":520,"wires":[["73da539b.a7227c"]]},{"id":"c21019b4.c2a32","type":"cipher","z":"c5efce4d.d0f16","name":"Encrypt","function":"Encrypt","algorithm":"AES-ECB","iv":"","key":"000102030405060708090A0B0C0D0E0F","ivSize":"16","keySize":"16","x":1080,"y":1040,"wires":[["ef18526e.4c2298"]]},{"id":"ef18526e.4c2298","type":"function","z":"c5efce4d.d0f16","name":"Wrap Into Dragino Lora Format","func":"// LA66 AT+SEND wrapper for Node-RED\n// Input controls (all optional):\n//   msg.sendMode: 1=text, 0=hex (default: 1; if payload is Buffer -> default 0)\n//   msg.ackType:  0,1,2        (default: 0)\n//   msg.retx:     0..8         (default: 0)\n//   msg.forceText: true to force text even if commas are present\n//\n// Output:\n//   msg.payload: \"AT+SEND=<mode>,<content>,<ack>,<retx>\\r\\n\"\n//   (ready for a Serial Out node)\n\nfunction toHex(data) {\n    if (Buffer.isBuffer(data)) return data.toString('hex').toUpperCase();\n    if (typeof data === 'string') return Buffer.from(data, 'utf8').toString('hex').toUpperCase();\n    // objects/numbers/bools -> hex of JSON\n    return Buffer.from(JSON.stringify(data), 'utf8').toString('hex').toUpperCase();\n}\n\nfunction toText(data) {\n    if (Buffer.isBuffer(data)) return data.toString('utf8');\n    if (typeof data === 'string') return data;\n    return JSON.stringify(data);\n}\n\nlet payload = msg.payload.encrypted;\n\nlet mode = (typeof msg.sendMode === 'number') ? msg.sendMode : undefined;\nlet ack  = (typeof msg.ackType  === 'number') ? msg.ackType  : 0;\nlet retx = (typeof msg.retx     === 'number') ? msg.retx     : 0;\n\n// Sensible default for mode:\n// Buffers default to hex, everything else defaults to text unless overridden.\nif (mode === undefined) {\n    mode = Buffer.isBuffer(payload) ? 0 : 1;\n}\n\n// Validate ranges\nack  = Math.max(0, Math.min(2, ack|0));\nretx = Math.max(0, Math.min(8, retx|0));\nmode = (mode === 0) ? 0 : 1; // only 0 or 1\n\nlet content;\nif (mode === 1) {\n    content = toText(payload);\n\n    // LA66 AT+SEND uses commas as parameter separators.\n    // If the text contains commas or CR/LF, many AT parsers will choke.\n    const hasComma = content.includes(',');\n    const hasCtl = /[\\r\\n]/.test(content);\n    if ((hasComma || hasCtl) && !msg.forceText) {\n        // Auto-switch to hex for safety\n        mode = 0;\n        content = toHex(payload);\n    } else {\n        // Optional: trim CR/LF — they’re not needed inside the content\n        content = content.replace(/[\\r\\n]/g, ' ');\n    }\n} else {\n    content = toHex(payload);\n}\n\n// Build final command\n// Note: no quoting is used; commas are not allowed in text mode content.\nconst cmd = `AT+SEND=${mode},${content},${ack},${retx}\\r\\n`;\n\nmsg.payload = cmd;\n// (Optional) tag for downstream nodes\nmsg.topic = 'LA66_AT_SEND';\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1310,"y":1040,"wires":[["b080859c.b44e78"]]},{"id":"9b365568.f72568","type":"function","z":"c5efce4d.d0f16","name":"Setup global var","func":"global.set(\"id\",\"s01\")\nglobal.set('heartbeats', []);\nglobal.set(\"bikes\", []);\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":60,"wires":[[]]},{"id":"2f82f3e8.58bd44","type":"mqtt in","z":"c5efce4d.d0f16","name":"FromRacks","topic":"station/rack/replies","qos":"2","datatype":"auto","broker":"470576f2.cc86b8","nl":false,"rap":true,"rh":0,"x":170,"y":1000,"wires":[["930fa7db.045e6"]]},{"id":"ee88c454.0588b8","type":"switch","z":"c5efce4d.d0f16","name":"Type Handlers","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"user_auth","vt":"str"},{"t":"eq","v":"lock","vt":"str"},{"t":"eq","v":"unlock","vt":"str"},{"t":"eq","v":"disconnect","vt":"str"},{"t":"eq","v":"error","vt":"str"},{"t":"eq","v":"heartbeat","vt":"str"}],"checkall":"true","repair":false,"outputs":6,"x":540,"y":1000,"wires":[["1aa1a59e.d8d2ca","1240630.0715d9d"],["9e8c4e9f.79d69","be2ce778.8cb6c8"],["f30d36dd.183e2","9e8c4e9f.79d69"],["ba9e179d.8a08a"],["53231c51.30f854"],["f6156a77.520d28","51cfdeba.404d88"]]},{"id":"1aa1a59e.d8d2ca","type":"function","z":"c5efce4d.d0f16","name":"Add station_id","func":"// Add the station_id to the authentification process\nmsg.payload.station_id = global.get(\"id\")\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":960,"wires":[["22de3ac4.060cd6","6c7030f.37ca45"]]},{"id":"f6156a77.520d28","type":"debug","z":"c5efce4d.d0f16","name":"Display Heatbeat of Stations","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":1200,"wires":[]},{"id":"930fa7db.045e6","type":"json","z":"c5efce4d.d0f16","name":"","property":"payload","action":"","pretty":false,"x":350,"y":1000,"wires":[["ee88c454.0588b8"]]},{"id":"ba9e179d.8a08a","type":"debug","z":"c5efce4d.d0f16","name":"Sation Disconnected","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":920,"y":1120,"wires":[]},{"id":"22de3ac4.060cd6","type":"mqtt out","z":"c5efce4d.d0f16","name":"","topic":"/hepl/auth","qos":"2","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"4fe90c4e.177694","x":1240,"y":960,"wires":[]},{"id":"6c7030f.37ca45","type":"function","z":"c5efce4d.d0f16","name":"DEBUG ; Always okay","func":"msg.payload.type = \"auth_response\"\nmsg.payload.reply = \"accept\"\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1300,"y":920,"wires":[["61fac93f.584d58"]]},{"id":"53231c51.30f854","type":"debug","z":"c5efce4d.d0f16","name":"Error","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":870,"y":1160,"wires":[]},{"id":"9e8c4e9f.79d69","type":"function","z":"c5efce4d.d0f16","name":"Add station_id","func":"// Add the station_id to the authentification process\nmsg.payload.station_id = global.get(\"id\")\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":1000,"wires":[["c2eb1e6e.9d61e8"]]},{"id":"c2eb1e6e.9d61e8","type":"mqtt out","z":"c5efce4d.d0f16","name":"","topic":"/hepl/parked","qos":"2","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"4fe90c4e.177694","x":1250,"y":1000,"wires":[]},{"id":"6c7dbff5.6a399","type":"json","z":"c5efce4d.d0f16","name":"","property":"payload","action":"","pretty":false,"x":870,"y":860,"wires":[["2cc1a088.8e74f"]]},{"id":"2cc1a088.8e74f","type":"switch","z":"c5efce4d.d0f16","name":"Reject other station message","property":"payload.station","propertyType":"msg","rules":[{"t":"eq","v":"id","vt":"global"}],"checkall":"true","repair":false,"outputs":1,"x":1120,"y":860,"wires":[["78e4978e.575ef"]]},{"id":"78e4978e.575ef","type":"switch","z":"c5efce4d.d0f16","name":"Type","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"auth_response","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":1330,"y":860,"wires":[["61fac93f.584d58"]]},{"id":"be2ce778.8cb6c8","type":"function","z":"c5efce4d.d0f16","name":"Lock bike","func":"msg.payload = \"aut,1,0\"; // adjust if you need a different string\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":1040,"wires":[["c21019b4.c2a32"]]},{"id":"f30d36dd.183e2","type":"function","z":"c5efce4d.d0f16","name":"Unlock bike","func":"msg.payload = msg.payload = \"aut,1,1\";\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1080,"wires":[["c21019b4.c2a32"]]},{"id":"51cfdeba.404d88","type":"function","z":"c5efce4d.d0f16","name":"Keep up an history of stations","func":"// Ingestion heartbeat avec horodatage local\n// Entrée attendue: msg.payload = { type, current_bike, status, state, rack_id, available, timestamp }\n// Tolère aussi msg.payload sous forme de chaîne JSON.\n\nlet hb = msg.payload;\n\n// 1) Parser si payload est une chaîne\nif (typeof hb === 'string') {\n    try {\n        hb = JSON.parse(hb);\n    } catch (e) {\n        node.warn('Payload JSON invalide: ' + e.message);\n        return null;\n    }\n}\n\n// 2) Valider l'objet heartbeat\nif (!hb || typeof hb !== 'object') {\n    node.warn('Payload non-objet ou vide');\n    return null;\n}\nif (!hb.rack_id) {\n    node.warn('Heartbeat sans rack_id -> ignoré');\n    return null;\n}\n\n// 3) Normaliser certains champs\nhb.timestamp = Number(hb.timestamp); // peut être en secondes ou ms selon device\nconst now = Date.now();\n\n// 4) Récupérer et mettre à jour la liste globale\nlet list = global.get('heartbeats') || [];\nconst idx = list.findIndex(e => e && e.rack_id === hb.rack_id);\n\nconst entry = {\n    rack_id: hb.rack_id,\n    payload: hb,           // état brut du device\n    last_seen_ms: now,     // temps serveur\n    last_device_ts: hb.timestamp\n};\n\nif (idx === -1) {\n    list.push(entry);\n} else {\n    list[idx] = entry;\n}\n\nglobal.set('heartbeats', list);\n\n// 5) Retourner quelque chose pour faciliter le debug\nreturn {\n    topic: 'heartbeat/upsert',\n    payload: {\n        saved: true,\n        count: list.length,\n        rack_id: hb.rack_id,\n        last_seen_ms: now,\n        last_device_ts: hb.timestamp\n    }\n};\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":950,"y":1240,"wires":[["122278b3.c38907"]]},{"id":"b4abbaef.998df8","type":"inject","z":"c5efce4d.d0f16","name":"Init signal","props":[],"repeat":"","crontab":"","once":true,"onceDelay":"0","topic":"","x":330,"y":60,"wires":[["9b365568.f72568"]]},{"id":"bef43179.5c3d98","type":"inject","z":"c5efce4d.d0f16","name":"Cron 5 minutes","props":[],"repeat":"300","crontab":"","once":true,"onceDelay":"0","topic":"","x":320,"y":100,"wires":[["a2ea52f0.e4ef2","ead3ccf0.4dd298"]]},{"id":"a2ea52f0.e4ef2","type":"function","z":"c5efce4d.d0f16","name":"Flush Stations","func":"// Flush old entries from global 'heartbeats' and emit \"died\" messages.\n//\n// Entrées (optionnelles) via msg:\n//   - msg.maxAgeSec (prioritaire) ou msg.maxAgeMs : seuil d'expiration\n//   - msg.store : nom du store de contexte (ex: 'file')\n//\n// Pré-requis côté ingestion: chaque entrée = {\n//   rack_id, payload, last_seen_ms, last_device_ts\n// }\n// où last_seen_ms = Date.now() à la réception précédente.\n\nconst store = msg.store;\nlet list = global.get('heartbeats', store) || [];\n\nlet maxAgeMs = 10 * 60 * 1000; // défaut 10 minutes\nif (typeof msg.maxAgeMs === 'number') maxAgeMs = msg.maxAgeMs;\nelse if (typeof msg.maxAgeSec === 'number') maxAgeMs = msg.maxAgeSec * 1000;\n\nconst now = Date.now();\n\nconst kept = [];\nconst deathMsgs = [];\nlet removedCount = 0;\n\nfor (const e of list) {\n    if (!e || typeof e.last_seen_ms !== 'number') {\n        removedCount++;\n        continue;\n    }\n    const age = now - e.last_seen_ms;\n    if (age <= maxAgeMs) {\n        kept.push(e);\n    } else {\n        removedCount++;\n        // Message d'alerte \"station died\"\n        deathMsgs.push({\n            topic: e.rack_id,\n            payload: {\n                status: \"dead\",\n                rack_id: e.rack_id,\n                reason: \"expired\",\n                maxAgeMs,\n                age_ms: age,\n                last_seen_ms: e.last_seen_ms,\n                last_seen_iso: new Date(e.last_seen_ms).toISOString(),\n                last_device_ts: e.last_device_ts,\n                last_payload: e.payload\n            }\n        });\n    }\n}\n\n// Sauvegarde la nouvelle liste\nglobal.set('heartbeats', kept, store);\n\n// Résumé en sortie 2\nconst summary = {\n    before: list.length,\n    after: kept.length,\n    removed: removedCount,\n    maxAgeMs,\n    now_ms: now,\n    now_iso: new Date(now).toISOString()\n};\n\n// Sorties: [liste_deathMsgs, résumé]\n// Si aucune station morte, sortie 1 = null\nreturn [deathMsgs.length ? deathMsgs : null, { payload: summary }];\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":100,"wires":[["7ad52fcb.699fe8"]]},{"id":"7ad52fcb.699fe8","type":"debug","z":"c5efce4d.d0f16","name":"A station died","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":760,"y":100,"wires":[]},{"id":"b88c6979.99d1c","type":"function","z":"c5efce4d.d0f16","name":"Number of actives racks","func":"const list = global.get('heartbeats') || [];\nmsg.payload = list.length;\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1150,"y":220,"wires":[[]]},{"id":"c7cd5cc.65b28a","type":"function","z":"c5efce4d.d0f16","name":"Number of actives rack with bikes ","func":"const list = global.get('heartbeats');\n\nconst count = Array.isArray(list)\n  ? list.reduce((acc, e) => acc + (e && e.payload && e.payload.current_bike != null ? 1 : 0), 0)\n  : 0;\n\nmsg.topic = 'active_racks';\nmsg.payload = count;\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1180,"y":260,"wires":[[]]},{"id":"1bd49c40.1e7624","type":"switch","z":"c5efce4d.d0f16","name":"Rotary Selector","property":"Menu","propertyType":"flow","rules":[{"t":"eq","v":"0","vt":"num"},{"t":"eq","v":"1","vt":"str"},{"t":"eq","v":"2","vt":"str"},{"t":"eq","v":"3","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":760,"y":220,"wires":[["b88c6979.99d1c"],["c7cd5cc.65b28a"],["48d366bc.870e8"],["27d05f62.fb6048"]]},{"id":"1240630.0715d9d","type":"function","z":"c5efce4d.d0f16","name":"Cheese ur taking in picture","func":"// Get user_id from payload\nconst userId = msg.payload.user_id;\n\n// Generate timestamp\nconst timestamp = new Date().toISOString().replace(/[-:.TZ]/g, '');\n\n// Construct filename\nconst filename = `/home/pi/auth_pic/${userId}_${timestamp}.jpg`;\n\n// Pass filename and any other config needed\nmsg.filename = filename;\n\n// Optional: Add camera settings (adjust as needed)\nmsg.payload = {\n    width: 1280,\n    height: 720,\n    quality: 100,\n    timeout: 1 // very short timeout for instant capture\n};\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":920,"wires":[["49447143.b68a4"]]},{"id":"ae19c93b.0ff848","type":"function","z":"c5efce4d.d0f16","name":"Keep an history of bikes","func":"// Ingest latest GPS entry per device_id into global context as an array: global.bikes\n\nconst entry = msg.payload;\nif (!entry || typeof entry !== 'object') return null;\n\nconst deviceId = String(entry.device_id);\nconst incomingTs = new Date(entry.timestamp).getTime();\nif (!deviceId || Number.isNaN(incomingTs)) return null;\n\n// Get current list (array of entries, one per device)\nlet bikes = global.get('bikes') || [];\n\n// Find existing record for this device\nconst idx = bikes.findIndex(e => String(e.device_id) === deviceId);\n\nif (idx === -1) {\n    bikes.push(entry);\n} else {\n    const existingTs = new Date(bikes[idx].timestamp).getTime();\n    if (incomingTs > existingTs) {\n        bikes[idx] = entry;\n    }\n}\n\n// Save back to global context\nglobal.set('bikes', bikes);\n\n// Ingestion only; do not forward the message\nreturn null;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1390,"y":640,"wires":[[]]},{"id":"ead3ccf0.4dd298","type":"function","z":"c5efce4d.d0f16","name":"Flush bikes","func":"// Emit one message per disappeared (stale) bike and remove them from global.bikes.\n//\n// Call with optional params in msg.payload:\n//   { maxAgeMs: 15*60*1000 }          // keep entries updated in last 15 min\n//   { maxAgeMinutes: 30 }             // keep entries updated in last 30 min\n//   { cutoff: \"2025-06-08T12:00:00Z\"} // keep entries with timestamp >= cutoff\n// Defaults to 60 minutes if none provided.\n//\n// Output:\n//   - For each removed bike, a message where:\n//       msg.topic   = \"bike_disappeared\"\n//       msg.payload = <the removed bike entry>\n//       msg.cutoff  = cutoff ISO string (for traceability)\n//   - If nothing disappears, returns null (no output).\n\nconst now = Date.now();\n\n// Read parameters\nconst p = (msg && typeof msg.payload === 'object') ? msg.payload : {};\nlet cutoffMs;\n\nif (typeof p.cutoff === 'string' || p.cutoff instanceof Date) {\n  cutoffMs = new Date(p.cutoff).getTime();\n}\n\nif (cutoffMs == null || Number.isNaN(cutoffMs)) {\n  let maxAgeMs;\n  if (typeof p.maxAgeMs === 'number') {\n    maxAgeMs = p.maxAgeMs;\n  } else if (typeof p.maxAgeMinutes === 'number') {\n    maxAgeMs = p.maxAgeMinutes * 60 * 1000;\n  } else {\n    maxAgeMs = 60 * 60 * 1000; // default 60 minutes\n  }\n  cutoffMs = now - maxAgeMs;\n}\n\nconst cutoffIso = new Date(cutoffMs).toISOString();\n\n// Load current bikes\nlet bikes = global.get('bikes') || [];\nif (!Array.isArray(bikes)) bikes = [];\n\n// Partition into fresh vs stale\nconst fresh = [];\nconst stale = [];\n\nfor (const e of bikes) {\n  const ts = new Date(e && e.timestamp).getTime();\n  if (!Number.isNaN(ts) && ts >= cutoffMs) {\n    fresh.push(e);\n  } else {\n    stale.push(e);\n  }\n}\n\n// Save updated (fresh) list\nglobal.set('bikes', fresh);\n\n// Emit one message per disappeared bike\nif (stale.length === 0) {\n  return null;\n}\n\nconst out = stale.map(e => ({\n  topic: \"bike_disappeared\",\n  payload: e,\n  cutoff: cutoffIso\n}));\n\n// Return array of messages (sent as multiple outputs from this node)\nreturn [out];\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":140,"wires":[["848308fd.e12bb8"]]},{"id":"848308fd.e12bb8","type":"debug","z":"c5efce4d.d0f16","name":"A bike died","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":750,"y":140,"wires":[]},{"id":"48d366bc.870e8","type":"function","z":"c5efce4d.d0f16","name":"Actives Bikes","func":"// Count bikes in global 'bikes' and return the number in msg.payload.\n// Optional: set msg.store (or msg.payload.store) to target a specific context store.\n\nconst list = global.get('bikes') || [];\nmsg.payload = Array.isArray(list) ? list.length : 0;\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":300,"wires":[[]]},{"id":"27d05f62.fb6048","type":"function","z":"c5efce4d.d0f16","name":"Bikes on the road","func":"const bikes = global.get('bikes');\nconst bikesNumber = Array.isArray(bikes) ? bikes.length : 0;\n\nconst heartbeats = global.get('heartbeats');\nconst racks_with_bikes = Array.isArray(heartbeats)\n  ? heartbeats.reduce(function (acc, e) {\n      return acc + (e && e.payload && e.payload.current_bike != null ? 1 : 0);\n    }, 0)\n  : 0;\n\nmsg.payload = Math.max(0, bikesNumber - racks_with_bikes);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":340,"wires":[[]]},{"id":"97027093.b154d8","type":"switch","z":"c5efce4d.d0f16","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"},{"t":"eq","v":"1","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":570,"y":220,"wires":[[],["1bd49c40.1e7624"]]},{"id":"b808f755.4eb478","type":"function","z":"c5efce4d.d0f16","name":"Menu Selector Simplifier","func":"const ROTARY_MAX_VALUE = 1023;\nconst MENU_ENTRIES_COUNT = 4;\n\nconst level_size = 1023/MENU_ENTRIES_COUNT;\nconst rotary_values = msg.payload;\nfor(let i =0 ; i < MENU_ENTRIES_COUNT ; i++)\n{\n    if(i==0)\n        if((i*level_size) <= rotary_values && rotary_values < ((i+1)*level_size))\n           flow.set(\"Menu\",i);\n    else\n         if((i*level_size) < rotary_values && rotary_values <= ((i+1)*level_size))\n           flow.set(\"Menu\",i);\n    \n}\n\nreturn msg;","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":300,"wires":[]},{"id":"337cb39.08872cc","type":"inject","z":"c5efce4d.d0f16","name":"Debug Stations List","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1010,"y":100,"wires":[["ae9f3676.fd1888"]]},{"id":"e232fecf.d819f8","type":"inject","z":"c5efce4d.d0f16","name":"Debug bikes List","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":1000,"y":140,"wires":[["249df1d.856ba0e"]]},{"id":"ae9f3676.fd1888","type":"function","z":"c5efce4d.d0f16","name":"Heatbeats","func":"msg.payload = global.get(\"heartbeats\")\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1190,"y":100,"wires":[["fc6380c5.b85608"]]},{"id":"249df1d.856ba0e","type":"function","z":"c5efce4d.d0f16","name":"Bikes","func":"msg.payload = global.get(\"bikes\")\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1170,"y":140,"wires":[["fc6380c5.b85608"]]},{"id":"fc6380c5.b85608","type":"debug","z":"c5efce4d.d0f16","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1350,"y":100,"wires":[]},{"id":"122278b3.c38907","type":"debug","z":"c5efce4d.d0f16","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1220,"y":1240,"wires":[]},{"id":"6831c0b3.caaa5","type":"inject","z":"c5efce4d.d0f16","name":"Check Values","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":770,"y":340,"wires":[["b88c6979.99d1c","c7cd5cc.65b28a","48d366bc.870e8","27d05f62.fb6048"]]}]